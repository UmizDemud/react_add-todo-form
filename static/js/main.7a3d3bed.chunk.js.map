{"version":3,"sources":["App.tsx","api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","index.tsx"],"names":["ChangeType","id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","TodoList","todos","map","App","useState","setTitle","setUser","setCompleted","todosFromServer","sort","a","b","setTodos","userNotSelected","titleIsEmpty","errors","setErrors","handleSubmit","e","preventDefault","length","prev","newTodo","handleChange","field","TITLE","target","value","USER","Number","parseInt","action","method","onSubmit","htmlFor","type","onChange","placeholder","disabled","usersFromServer","item","checked","COMPLETED","onClick","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a3d3bed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\n\nenum ChangeType {\n  TITLE,\n  USER,\n  COMPLETED,\n}\n\nexport const App: React.FC<{}> = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState(0);\n  const [completed, setCompleted] = useState(false);\n  const [todos, setTodos] = useState(\n    todosFromServer.sort((a, b) => a.id - b.id),\n  );\n\n  const [errors, setErrors] = useState({\n    userNotSelected: false,\n    titleIsEmpty: false,\n  });\n\n  const clearForm = () => {\n    setTitle('');\n    setUser(0);\n    setCompleted(false);\n  };\n\n  const handleSubmit = (\n    e: React.SyntheticEvent | React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    e.preventDefault();\n    setErrors({\n      userNotSelected: user === 0,\n      titleIsEmpty: title.length === 0,\n    });\n\n    setTodos(prev => {\n      if (user === 0 || title.length === 0) {\n        return prev;\n      }\n\n      const newTodo = {\n        id: prev[prev.length - 1].id + 1,\n        title,\n        userId: user,\n        completed,\n      };\n\n      clearForm();\n\n      return ([\n        ...prev,\n        newTodo,\n      ]);\n    });\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    field: ChangeType,\n  ) => {\n    switch (field) {\n      case ChangeType.TITLE:\n        setTitle(e.target.value);\n        setErrors(prev => ({\n          userNotSelected: prev.userNotSelected,\n          titleIsEmpty: false,\n        }));\n        break;\n      case ChangeType.USER:\n        setUser(Number.parseInt(e.target.value, 10));\n        setErrors(prev => ({\n          userNotSelected: false,\n          titleIsEmpty: prev.titleIsEmpty,\n        }));\n        break;\n      default: // ChangeType.COMPLETED\n        setCompleted(prev => !prev);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            data-cy=\"titleInput\"\n            onChange={e => handleChange(e, ChangeType.TITLE)}\n            placeholder=\"Enter title...\"\n          />\n          {errors.titleIsEmpty\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            onChange={e => handleChange(e, ChangeType.USER)}\n            data-cy=\"userSelect\"\n            value={user}\n          >\n            <option\n              value={0}\n              key={0}\n              disabled\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(item => (\n              <option\n                key={item.username}\n                value={item.id}\n              >\n                {item.name}\n              </option>\n            ))}\n          </select>\n          {errors.userNotSelected\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <div className=\"field\">\n          <input\n            type=\"checkbox\"\n            name=\"completed\"\n            id=\"completed\"\n            checked={completed}\n            onChange={e => handleChange(e, ChangeType.COMPLETED)}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleSubmit}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(item => item.id === todo.userId) || null,\n      }))}\n      />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }: Props) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }: Props) => (\n  <article\n    data-id={todo.id}\n    className={`TodoInfo${todo.completed ? ' TodoInfo--completed' : ''}`}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user\n      ? <UserInfo user={todo.user} />\n      : <></>}\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }: Props) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n  </section>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}